
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-51

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 52-60

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 62-71

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 71-101

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 102-103

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 103-159

.. code-block:: Python


    device = torch.cuda.current_device()
    properties = driver.active.utils.get_device_properties(device)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software piepling stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel, num_programs = kernels.get(BLOCK_SIZE, (None, 0))
        if kernel is None:
            kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                           num_stages=num_stages, num_warps=num_warps, grid=(1, ))
            kernel._init_handles()
            n_regs = kernel.n_regs
            size_smem = kernel.metadata.shared
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
            occupancy = min(occupancy, SIZE_SMEM // size_smem)
            num_programs = NUM_SM * occupancy
            kernels[BLOCK_SIZE] = (kernel, num_programs)

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](
            y,
            x,
            x.stride(0),
            y.stride(0),
            n_rows,
            n_cols,
        )
        return y









.. GENERATED FROM PYTHON SOURCE LINES 160-162

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 164-166

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 166-173

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device='cuda')
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 174-175

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 177-182

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 182-213

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch'],  # possible values for `line_arg``
            line_names=[
                "Triton",
                "Torch",
            ],  # label name for the lines
            styles=[('blue', '-'), ('green', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device='cuda', dtype=torch.float32)
        stream = torch.cuda.Stream()
        torch.cuda.set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        gbps = lambda ms: 2 * x.nelement() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch
    0     256.0   465.463076   675.883749
    1     384.0   603.079841   830.079190
    2     512.0   753.161944   914.066855
    3     640.0   794.511138   948.204968
    4     768.0   876.875005  1028.022329
    5     896.0   924.292555  1063.979061
    6    1024.0   992.233743  1107.052681
    7    1152.0  1106.869379   617.406361
    8    1280.0  1137.945170   667.999010
    9    1408.0  1162.981028   729.775076
    10   1536.0  1185.488174   786.231422
    11   1664.0  1216.467604   818.384227
    12   1792.0  1244.282941   858.164107
    13   1920.0  1255.540209   914.369932
    14   2048.0  1276.738954   964.849517
    15   2176.0  1264.639989   976.216613
    16   2304.0  1266.730342  1013.633062
    17   2432.0  1295.641882  1056.499041
    18   2560.0  1297.153183  1093.460116
    19   2688.0  1313.661261  1111.337888
    20   2816.0  1329.564965  1140.557943
    21   2944.0  1331.614829  1176.775172
    22   3072.0  1341.051904  1191.683308
    23   3200.0  1349.888142  1202.503826
    24   3328.0  1358.588367  1229.027717
    25   3456.0  1377.428691  1250.427581
    26   3584.0  1374.510821  1268.784121
    27   3712.0  1377.176722  1279.071948
    28   3840.0  1381.287203  1301.882679
    29   3968.0  1389.064106  1318.881448
    30   4096.0  1395.474538  1331.512185
    31   4224.0  1345.556647  1166.650002
    32   4352.0  1342.369741  1174.156135
    33   4480.0  1351.710851  1178.985727
    34   4608.0  1354.019193  1194.362631
    35   4736.0  1362.612599  1202.738098
    36   4864.0  1369.436098  1220.977976
    37   4992.0  1375.796474  1232.807729
    38   5120.0  1376.351827  1256.846607
    39   5248.0  1379.287461  1265.840070
    40   5376.0  1373.963366  1284.049845
    41   5504.0  1382.889222  1296.432798
    42   5632.0  1393.714894  1316.893384
    43   5760.0  1398.826036  1327.094235
    44   5888.0  1396.044465  1343.728873
    45   6016.0  1399.249264  1350.663263
    46   6144.0  1408.159052  1373.836110
    47   6272.0  1415.220403  1377.667866
    48   6400.0  1415.589407  1390.342081
    49   6528.0  1415.519673  1395.398534
    50   6656.0  1418.895634  1404.581657
    51   6784.0  1418.203402  1413.922009
    52   6912.0  1420.279835  1426.416621
    53   7040.0  1425.235022  1428.082469
    54   7168.0  1431.983130  1438.079289
    55   7296.0  1432.106994  1445.071214
    56   7424.0  1426.862629  1449.840203
    57   7552.0  1429.480220  1455.603978
    58   7680.0  1436.278797  1463.003647
    59   7808.0  1434.404832  1464.748231
    60   7936.0  1432.440983  1470.346752
    61   8064.0  1431.421053  1473.393801
    62   8192.0  1432.095196  1484.318597
    63   8320.0  1387.450876  1402.386272
    64   8448.0  1384.443465  1405.896562
    65   8576.0  1392.396541  1396.134852
    66   8704.0  1390.734237  1403.150266
    67   8832.0  1391.962230  1404.885386
    68   8960.0  1392.497146  1414.524497
    69   9088.0  1405.587214  1418.987296
    70   9216.0  1403.700211  1425.223331
    71   9344.0  1402.034764  1423.639872
    72   9472.0  1391.304006  1433.051585
    73   9600.0  1402.086866  1437.097020
    74   9728.0  1404.221575  1444.898518
    75   9856.0  1405.529715  1441.766156
    76   9984.0  1392.189223  1451.555775
    77  10112.0  1413.514547  1459.581911
    78  10240.0  1411.416652  1469.622297
    79  10368.0  1417.430944  1465.406049
    80  10496.0  1423.622408  1469.707135
    81  10624.0  1404.217003  1469.395778
    82  10752.0  1394.721768  1473.584987
    83  10880.0  1394.388858  1478.529736
    84  11008.0  1414.236727  1477.103531
    85  11136.0  1428.479102  1484.901506
    86  11264.0  1413.707974  1487.465253
    87  11392.0  1419.858471  1491.152346
    88  11520.0  1418.984065  1497.066641
    89  11648.0  1427.240185  1503.509443
    90  11776.0  1424.484961  1506.276858
    91  11904.0  1435.529476  1506.144435
    92  12032.0  1412.830212  1506.302588
    93  12160.0  1414.303931  1512.440974
    94  12288.0  1431.206105  1393.859097
    95  12416.0  1444.323508  1389.925161
    96  12544.0  1444.659330  1394.155304
    97  12672.0  1439.147480  1394.767174




.. GENERATED FROM PYTHON SOURCE LINES 214-218

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.652 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
