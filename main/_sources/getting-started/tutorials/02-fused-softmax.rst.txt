
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-51

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 52-60

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 62-71

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 71-101

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 102-103

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 103-159

.. code-block:: Python


    device = torch.cuda.current_device()
    properties = driver.active.utils.get_device_properties(device)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software piepling stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel, num_programs = kernels.get(BLOCK_SIZE, (None, 0))
        if kernel is None:
            kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                           num_stages=num_stages, num_warps=num_warps, grid=(1, ))
            kernel._init_handles()
            n_regs = kernel.n_regs
            size_smem = kernel.metadata.shared
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
            occupancy = min(occupancy, SIZE_SMEM // size_smem)
            num_programs = NUM_SM * occupancy
            kernels[BLOCK_SIZE] = (kernel, num_programs)

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](
            y,
            x,
            x.stride(0),
            y.stride(0),
            n_rows,
            n_cols,
        )
        return y









.. GENERATED FROM PYTHON SOURCE LINES 160-162

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 164-166

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 166-173

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device='cuda')
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 174-175

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 177-182

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 182-213

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch'],  # possible values for `line_arg``
            line_names=[
                "Triton",
                "Torch",
            ],  # label name for the lines
            styles=[('blue', '-'), ('green', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device='cuda', dtype=torch.float32)
        stream = torch.cuda.Stream()
        torch.cuda.set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        gbps = lambda ms: 2 * x.nelement() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch
    0     256.0   476.129923   704.183396
    1     384.0   607.364057   822.863089
    2     512.0   759.148967   918.857061
    3     640.0   796.071545   948.537204
    4     768.0   872.955743  1015.595259
    5     896.0   937.334459  1060.542962
    6    1024.0   995.817510  1116.910315
    7    1152.0  1098.860253   615.166406
    8    1280.0  1147.877748   669.249693
    9    1408.0  1168.947018   722.022380
    10   1536.0  1195.282045   779.317799
    11   1664.0  1210.235443   810.121339
    12   1792.0  1232.713183   863.707446
    13   1920.0  1258.165381   910.767807
    14   2048.0  1275.109472   959.193104
    15   2176.0  1256.489854   973.830143
    16   2304.0  1273.887487  1008.269777
    17   2432.0  1302.596109  1057.673717
    18   2560.0  1300.856073  1083.074075
    19   2688.0  1315.796101  1105.511330
    20   2816.0  1327.774073  1133.400027
    21   2944.0  1325.261128  1165.082859
    22   3072.0  1354.989167  1185.122971
    23   3200.0  1348.064882  1192.778117
    24   3328.0  1364.331281  1223.747971
    25   3456.0  1379.340929  1251.652610
    26   3584.0  1376.018494  1257.846675
    27   3712.0  1380.620599  1271.831027
    28   3840.0  1390.977691  1302.987757
    29   3968.0  1390.600983  1316.373059
    30   4096.0  1401.801627  1322.968559
    31   4224.0  1335.030971  1161.319156
    32   4352.0  1338.938208  1173.409605
    33   4480.0  1349.021328  1183.186412
    34   4608.0  1364.294536  1196.710603
    35   4736.0  1359.061177  1200.952422
    36   4864.0  1374.259215  1219.664782
    37   4992.0  1368.363029  1238.157068
    38   5120.0  1377.190483  1251.265165
    39   5248.0  1376.111723  1256.851032
    40   5376.0  1373.012308  1287.715317
    41   5504.0  1380.067992  1301.826010
    42   5632.0  1388.430849  1312.232926
    43   5760.0  1395.524093  1328.861745
    44   5888.0  1388.805646  1339.971547
    45   6016.0  1400.117657  1353.529604
    46   6144.0  1405.824815  1375.257465
    47   6272.0  1412.743019  1372.792695
    48   6400.0  1416.907697  1387.843621
    49   6528.0  1410.984237  1396.145494
    50   6656.0  1420.503753  1405.771898
    51   6784.0  1410.825683  1412.874832
    52   6912.0  1427.312992  1425.662838
    53   7040.0  1418.753155  1430.555342
    54   7168.0  1430.841580  1431.861505
    55   7296.0  1432.372677  1441.447672
    56   7424.0  1428.945431  1445.419445
    57   7552.0  1431.476829  1454.884762
    58   7680.0  1436.969388  1460.073814
    59   7808.0  1435.648450  1463.971543
    60   7936.0  1440.367429  1469.369601
    61   8064.0  1438.656529  1474.329940
    62   8192.0  1434.596692  1485.986593
    63   8320.0  1384.381060  1401.498508
    64   8448.0  1382.075571  1406.098530
    65   8576.0  1396.522755  1396.023442
    66   8704.0  1390.933235  1399.508411
    67   8832.0  1376.194602  1405.685718
    68   8960.0  1398.360254  1411.534676
    69   9088.0  1411.473524  1416.143906
    70   9216.0  1404.877032  1426.475690
    71   9344.0  1396.748308  1422.065600
    72   9472.0  1395.700415  1437.647366
    73   9600.0  1395.922549  1436.117336
    74   9728.0  1401.166518  1444.156700
    75   9856.0  1411.498200  1444.610565
    76   9984.0  1401.594116  1451.110421
    77  10112.0  1413.540874  1454.838245
    78  10240.0  1424.276236  1470.002503
    79  10368.0  1413.328223  1463.410216
    80  10496.0  1414.185913  1468.161795
    81  10624.0  1410.441489  1469.443837
    82  10752.0  1404.295131  1472.722197
    83  10880.0  1400.223202  1482.869515
    84  11008.0  1424.510419  1477.027102
    85  11136.0  1422.481804  1484.154279
    86  11264.0  1431.872431  1488.496774
    87  11392.0  1419.545332  1491.102642
    88  11520.0  1424.345806  1495.842323
    89  11648.0  1425.753155  1500.867024
    90  11776.0  1430.712447  1500.828540
    91  11904.0  1443.965433  1507.343006
    92  12032.0  1423.505319  1510.500617
    93  12160.0  1418.903248  1512.509755
    94  12288.0  1437.591102  1393.456431
    95  12416.0  1452.763251  1393.134606
    96  12544.0  1446.681212  1394.706536
    97  12672.0  1447.301397  1391.745442




.. GENERATED FROM PYTHON SOURCE LINES 214-218

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 29.129 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
